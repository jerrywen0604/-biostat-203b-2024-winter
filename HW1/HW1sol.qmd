---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Jerry Wen UID:206332988"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** This is my address of repository <https://github.com/jerrywen0604/-biostat-203b-2024-winter>

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** the link to my[completion report](https://www.citiprogram.org/verify/?kc3a2ecbd-6aed-4d25-88af-2aa24dd41c6b-60469570)

the link to my [certificate](https://www.citiprogram.org/verify/?wff2f4ee9-6b17-4f92-aa2f-3811b75d8cc6-60469570) 

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
#| eval: true
ls -l ~/mimic
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

**Answer:** I created a symbolic link 'mimic' to my folder.
Here is the output 'ls -l ~/mimic':
```{bash}
ls -l ~/mimic/
```

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.


**Answer** This is the contents of 'hosp'
```{bash}
ls -l ~/mimic/hosp
```
And this is the contents of 'icu'
```{bash}
ls -l ~/mimic/icu
```
And the reason why data files distributed as 'csv.gz' are as follows

**1**.Compressing as .csv.gz reduces the file size significantly compared to a plain .csv.

**2**.Users can download compressed files much faster than uncompressed ones.

**3**.Most data processing tools and languages (like Python, R, and others) can read .csv.gz files directly without manual decompression.

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**zcat** This command is useful when you want to view the contents of a compressed file without actually decompressing it.

**zless**It allows you to view gzip-compressed files one screen at a time,without decompressing it permanently.

**zmore**It displays the contents of gzip-compressed files one screen at a time.It's particularly useful for reading longer text files or command outputs that don't fit into a single terminal window.

**zgrep**:It enables you to search for patterns within gzip-compressed files without decompressing them.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  echo "$datafile: $(zcat < $datafile | wc -l) lines"
done

```
5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | head

```
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | wc -l| awk '{print $1-1}'
```
```{bash}
#| eval: true
zcat ~/mimic/hosp/patients.csv.gz | awk -F, '{print $1}' | sort | uniq | wc -l

```
**Answer**: No, they do not match the number of patients.

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer**: It is unique admission_type
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $6}' | sort | uniq -c

```

It is unique admission_location
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $8}' | sort | uniq -c

```
It is unique insurace
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $10}' | sort | uniq -c

```
It is unique ethnicity
```{bash}
#| eval: true
zcat ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $13}' | sort | uniq -c

```
7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Answer** the size of  the Compressed File 
```{bash}
#| eval: true
ls -lh ~/mimic/hosp/labevents.csv.gz

```
the size of decompressed File and Compare the run times 
```{bash}
#| eval: true
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv
ls -lh labevents.csv
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
time wc -l labevents.csv
rm labevents.csv
```

The results show that the compressed file(labevents.csv.gz) take up less space compared to uncompressed versions(labevents.csv).On the other hand, it takes more time to read compressed file than reading uncompressed file. Because when we use 'zcat', we need to decompress the data on the fly, which takes a certain amount of time. For big data, the decision to compress or not often depends on how often the data is accessed and processed. If storage space is a limiting factor, or if the data is not frequently accessed, compression is advantageous. However, if we need to process more quickly, we should use uncompressed files.

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o -i $char pg42671.txt | wc -l
done
```
**Answer** Elizabeth:634
Jane:293
Lydia:171
Darcy:418

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

**> means:**If test1.txt already exists, this command will overwrite the file with the new content ('hello, world'). In other words, any existing content in test1.txt will be lost.If test1.txt does not exist, it will be created.

**>> means:**If test2.txt already exists, 'hello, world' will be added to the end of the file, preserving any existing content in the file.If test2.txt does not exist, it will be created, and 'hello, world' will be written to it.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: true
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**$1** This is the filename $1 from which lines will be selected.

**$2**This means the head command will extract the first $2 lines 

**$3**This tells the tail command to display the last $3 lines out of the lines extracted by the head command.

**The first line** It specifies the interpreter to be used to execute the script

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**cal**Displays a calendar of the current month.
```{bash}
#| eval: true
cal
```

**cal 2024**Shows the calendar for the entire year 2024.
```{bash}
#| eval: true
cal 2024
```

**cal 9 1752**Displays the calendar for September 1752
```{bash}
#| eval: true
cal 9 1752
```

**date**Shows the current date and time.
```{bash}
#| eval: true
date
```
**hostname**Displays the name of the current host or system you're working on.
```{bash}
#| eval: true
hostname
```

**arch**Prints the architecture of the machine 
```{bash}
#| eval: true
arch
```

**uname -a**Shows all system information
```{bash}
#| eval: true
uname -a
```
**uptime**Displays the current uptime of the system
```{bash}
#| eval: true
uptime
```
**who am i** maybe used, no function
```{bash}
#| eval: true
who am i
```

**who**Lists all users currently logged into the system.
```{bash}
#| eval: true
who 
```

**w**Shows more detailed information including what each user is doing.
```{bash}
#| eval: true
w
```

**id**Displays user identity information, including user ID (UID), group ID (GID), and group memberships.
```{bash}
#| eval: true
id
```

**last | head**Shows the most recent login sessions.
```{bash}
#| eval: true
last | head
```


**echo {con,pre}{sent,fer}{s,ed}**This command uses brace expansion to create combinations of the given elements. 
```{bash}
#| eval: true
echo {con,pre}{sent,fer}{s,ed}
```

**time sleep 5**Executes the sleep command for 5 seconds and then time reports how long the command took to execute. 
```{bash}
#| eval: true
time sleep 5
```

**history | tail**Lists the most recent commands default 10
```{bash}
#| eval: true
history | tail
```
## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer:** This is the screenshot of section4.1.5
![the screenshot](./4.1.5screen.png)